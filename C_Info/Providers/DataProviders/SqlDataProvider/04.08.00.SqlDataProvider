ALTER TABLE dbo.C_info ADD
	UpdateTime datetime NULL
GO

ALTER TABLE dbo.C_InfoExtFiled ADD
	CanViewRoles nvarchar(500) NULL,
	NoRightAlert nvarchar(500) NULL
GO

ALTER PROCEDURE [dbo].[C_info_ExtField_Add]
    @ModuleID int,
    @Name nvarchar(100),
    @Type nvarchar(100),
    @EName nvarchar(100),
    @DefaultValue nvarchar(1000),
	@PortalID int,
	@OrderNum int,
	@IsRequired bit,
	@GroupName nvarchar(50),
	@CanViewRoles nvarchar(500),
	@NoRightAlert nvarchar(500)
AS
    insert into C_InfoExtFiled(ModuleID,Name,Type,EName,DefaultValue,PortalID,OrderNum,IsRequired,GroupName,CanViewRoles,NoRightAlert)
	Values(@ModuleID,@Name,@Type,@EName,@DefaultValue,@PortalID,@OrderNum,@IsRequired,@GroupName,@CanViewRoles,@NoRightAlert)
GO
ALTER PROCEDURE [dbo].[C_info_ExtField_Update]
    @ExtFieldID int,
    @ModuleID int,
    @Name nvarchar(100),
    @Type nvarchar(100),
    @EName nvarchar(100),
    @DefaultValue nvarchar(1000),
    @PortalID int,
    @OrderNum int,
	@IsRequired bit,
	@GroupName nvarchar(50),
	@CanViewRoles nvarchar(500),
	@NoRightAlert nvarchar(500)
AS
    update C_InfoExtFiled
	set 
	Name=@Name,
	Type=@Type,
	EName=@EName,
	DefaultValue=@DefaultValue,
	ModuleID=@ModuleID,
	PortalID = @PortalID,
	OrderNum = @OrderNum,
	IsRequired=@IsRequired,
	GroupName=@GroupName,
	CanViewRoles=@CanViewRoles,
	NoRightAlert=@NoRightAlert
  	where ExtFieldID=@ExtFieldID
 GO
 
Create     PROCEDURE [dbo].[C_info_ExtValue_Update]
    @ExtFieldID int,
    @InfoID int,
    @ExtValue ntext
AS
    update C_infoExtValue
    set ExtValue = @ExtValue
    where ExtFieldID = @ExtFieldID and InfoID=@InfoID
GO

alter    PROCEDURE C_info_UPDATE
    @InfoID int,
    @SortDate datetime,
    @Title nvarchar(200),
    @ShortTitle nvarchar(100),
    @Description nvarchar(2000),
    @Content ntext,
    @Source nvarchar(100),
    @KeyWords nvarchar(150),
    @IsExtURL bit,
    @ExtURL nvarchar(150),
    @CategoryID int,
    @Author nvarchar(150),
    @Image nvarchar(200),
    @ImagePosition nvarchar(10),
    @ImageSize nvarchar(50),
    @ExpireDate datetime,
    @PubDate datetime,
    @AttachFile nvarchar(250),
    @Doc1 nvarchar(250),
    @Doc2 nvarchar(250),
    @Doc3 nvarchar(250),
    @Doc4 nvarchar(250),
    @Doc5 nvarchar(1000),
    @Doc6 nvarchar(1000),
    @Doc7 nvarchar(1000),
    @Doc8 nvarchar(1000),
    @Syndicate bit,
    @SortTop bit,
    @Recommend bit,
    @TitleStyle nvarchar(200),
    @ApproveStatus int,
    @CreateDate datetime
AS

declare @oldApproveStatus int
select @oldApproveStatus = ApproveStatus from c_Info where InfoID=@InfoID

UPDATE [C_info]
SET
    SortDate = @SortDate,
    Title = @Title,
    ShortTitle=@ShortTitle,
    Description = @Description,
    Content = @Content,
    Source = @Source,
    KeyWords = @KeyWords,
    IsExtURL = @IsExtURL,
    ExtURL = @ExtURL,
    CategoryID = @CategoryID,
    Author = @Author,
    Image = @Image,
    ImagePosition = @ImagePosition,
    ImageSize = @ImageSize,
    ExpireDate = @ExpireDate,
    PubDate = @PubDate,
    AttachFile = @AttachFile,
    Doc1 = @Doc1,
    Doc2 = @Doc2,
    Doc3 = @Doc3,
    Doc4 = @Doc4,
    Doc5 = @Doc5,
    Doc6 = @Doc6,
    Doc7 = @Doc7,
    Doc8 = @Doc8,
    Syndicate = @Syndicate,
    SortTop = @SortTop,
    Recommend = @Recommend,
    TitleStyle = @TitleStyle,
    ApproveStatus = @ApproveStatus,
    CreateDate = @CreateDate,
    UpdateTime = getdate()
WHERE InfoID=@InfoID
if @oldApproveStatus=1 and @ApproveStatus<>1
begin
	update C_Info set Doc4='delete' WHERE InfoID=@InfoID
end
else
begin 
	update C_Info set Doc4='' WHERE InfoID=@InfoID
end
GO

create procedure C_info_GetUpdateInfos
@BeginTime datetime,
@EndTime datetime,
@PortalID int,
@OnlyServiceTypeExtFiled bit
As
declare @sql varchar(8000)
set @sql='select InfoId,Title,ExtUrl,Description,Author,C_Info.ModuleId,(select max(tabid) from tabmodules where moduleid=C_Info.Moduleid) as TabId,case when doc4=''delete'' then ''D'' when updatetime is null then ''N'' else ''U'' end as status, 
isnull(updatetime, createDate) as pubDate'
if @OnlyServiceTypeExtFiled = 1
begin
 set @sql=@sql+',(select convert(varchar(200),extvalue) from C_InfoExtValue inner join C_InfoExtFiled on C_InfoExtValue.ExtFieldId=C_InfoExtFiled.ExtFieldId where C_InfoExtValue.InfoID=C_Info.InfoID 
and EName = (select SettingValue from ModuleSettings where SettingName=''ServiceTypeExtField'' and Moduleid=C_Info.ModuleID )) as ServiceType'
end
set @sql=@sql+' from C_Info inner join Modules on C_Info.ModuleID=Modules.ModuleId
where  Modules.IsDeleted=0
and (
(approveStatus=1 and CreateDate >='''+convert(varchar(50),@BeginTime)+''' and CreateDate<'''+convert(varchar(50),@EndTime)+''' and updateTime is null) 
or (approveStatus=1 and updateTime >='''+convert(varchar(50),@BeginTime)+'''  and updateTime<'''+convert(varchar(50),@EndTime)+''')
or (doc4=''delete'' and updateTime >='''+convert(varchar(50),@BeginTime)+''' and updateTime<'''+convert(varchar(50),@EndTime)+''')
)
and Modules.PortalId = '+ convert(varchar(10),@PortalID)
if @OnlyServiceTypeExtFiled = 1
begin
 set @sql=@sql+'and C_Info.ModuleId in (select ModuleId from modulesettings where settingname=''ServiceTypeExtField'' and settingvalue<>'''')'
end
exec(@sql)
GO


ALTER  PROCEDURE C_info_GetModules
@UserId int,
@PermissionName varchar(20),
@IsEqual bit,
@PortalIds varchar(200)
AS
declare @ModuleDefID int
SELECT @ModuleDefID = ModuleDefID
         FROM ModuleDefinitions
         WHERE DesktopModuleID =
                   (SELECT TOP 1 DesktopModuleID
                  FROM DesktopModules
                  WHERE ModuleName = 'C_Info')

declare @TempPortals table(portalid int primary key)
declare @TempNotInfoModules table(moduleid int primary key)
if @PortalIds=''
begin
insert @TempPortals(portalid)
select portalid from portals
insert @TempNotInfoModules(moduleid)
select Modules.ModuleId from ModuleSettings Inner Join Modules on ModuleSettings.ModuleId=Modules.ModuleId  where  ModuleDefID=@ModuleDefID and ModuleSettings.SettingName = 'ModuleType' And (SettingValue ='Search' OR SettingValue ='SearchList' OR SettingValue ='Detail' OR SettingValue ='UpInfo' OR SettingValue ='MoreList' OR SettingValue ='Spec')
end
else
begin
declare @newId varchar(20)
declare @nStartIndex int
declare @nCommaIndex int
set @nStartIndex = 1
set @nCommaIndex = charindex(',',@PortalIds)
while @nCommaIndex > 0
begin
set @newId = SubString(@PortalIds,@nStartIndex,@nCommaIndex - @nStartIndex)

insert @TempPortals(portalid)
values(@newId)
insert @TempNotInfoModules(moduleid)
select modules.ModuleId from ModuleSettings inner join modules on modules.moduleid=ModuleSettings.moduleid where ModuleDefID=@ModuleDefID and (Modules.PortalId =@newId) And ModuleSettings.SettingName = 'ModuleType' And (SettingValue ='Search' OR SettingValue ='SearchList' OR SettingValue ='Detail' OR SettingValue ='UpInfo' OR SettingValue ='MoreList' OR SettingValue ='Spec')

set @nStartIndex = @nCommaIndex + 1
set @nCommaIndex = charindex(',',@PortalIds,@nStartIndex)
end
set @newId = SubString(@PortalIds,@nStartIndex,len(@PortalIds) - @nStartIndex + 1)
insert @TempPortals(portalid)
values(@newId)
insert @TempNotInfoModules(moduleid)
select modules.ModuleId from ModuleSettings inner join modules on modules.moduleid=ModuleSettings.moduleid where ModuleDefID=@ModuleDefID and (Modules.PortalId =@newId) And ModuleSettings.SettingName = 'ModuleType' And (SettingValue ='Search' OR SettingValue ='SearchList' OR SettingValue ='Detail' OR SettingValue ='UpInfo' OR SettingValue ='MoreList' OR SettingValue ='Spec')
end

if @UserId = 0 and @IsEqual = 1
begin
select Modules.ModuleID, ModuleTitle, Modules.PortalID,Tabs.TabName,Tabs.TabID from modules 
inner join TabModules On TabModules.ModuleID=Modules.ModuleID 
inner join Tabs On Tabs.TabID=TabModules.TabID
where 
ModuleDefID=@ModuleDefID AND (Tabs.IsDeleted = 0) AND (Modules.IsDeleted = 0) 
And Modules.ModuleId not in(select ModuleId from @TempNotInfoModules)
return
end
if @UserId = 0 and @IsEqual = 0
begin
return
end
if @UserID = -1 and @PermissionName='Edit' and @IsEqual = 1
begin
SELECT DISTINCT 
      Modules.ModuleID, Modules.ModuleTitle, Modules.PortalID, Tabs.TabName, 
      Tabs.TabID
FROM ModulePermission INNER JOIN
      Permission ON 
      ModulePermission.PermissionID = Permission.PermissionID INNER JOIN
      Modules INNER JOIN
      TabModules ON TabModules.ModuleID = Modules.ModuleID INNER JOIN
      Tabs ON Tabs.TabID = TabModules.TabID ON 
      ModulePermission.ModuleID = Modules.ModuleID
WHERE (Modules.ModuleDefID =
          @ModuleDefID) And (Modules.PortalId in (select portalid from @TempPortals)) And Modules.ModuleId not in(select ModuleId from @TempNotInfoModules) AND (Modules.IsDeleted = 0) AND 
      (Tabs.IsDeleted = 0) AND (Permission.PermissionName = 'Edit' ) AND 
      (ModulePermission.RoleID = - 1)
return
end
if @UserID = -1 and @PermissionName='View' and @IsEqual = 1
begin
SELECT Modules.ModuleID, Modules.ModuleTitle, Modules.PortalID, Tabs.TabName, 
      Tabs.TabID
FROM Permission Permission_1 INNER JOIN
      Tabs INNER JOIN
      TabModules ON Tabs.TabID = TabModules.TabID INNER JOIN
      TabPermission ON Tabs.TabID = TabPermission.TabID ON 
      Permission_1.PermissionID = TabPermission.PermissionID INNER JOIN
      Modules ON TabModules.ModuleID = Modules.ModuleID
WHERE (Modules.ModuleDefID =
          @ModuleDefID) And (Modules.PortalId in (select portalid from @TempPortals)) And Modules.ModuleId not in(select ModuleId from @TempNotInfoModules) AND (Modules.IsDeleted = 0) AND 
      (Tabs.IsDeleted = 0) AND (Permission_1.PermissionName = 'View Tab') AND 
      (TabPermission.RoleID = - 1)  AND InheritViewPermissions = 1
Union
SELECT Modules.ModuleID, Modules.ModuleTitle, Modules.PortalID, Tabs.TabName, 
      Tabs.TabID
FROM Tabs INNER JOIN
      TabModules ON Tabs.TabID = TabModules.TabID INNER JOIN
      Modules ON TabModules.ModuleID = Modules.ModuleID INNER JOIN
      ModulePermission INNER JOIN
      Permission ON ModulePermission.PermissionID = Permission.PermissionID ON 
      Modules.ModuleID = ModulePermission.ModuleID
WHERE (Modules.ModuleDefID =
          @ModuleDefID) And (Modules.PortalId in (select portalid from @TempPortals)) And Modules.ModuleId not in(select ModuleId from @TempNotInfoModules) AND (Modules.IsDeleted = 0) AND 
      (Tabs.IsDeleted = 0) AND (Permission.PermissionName = 'View') AND 
      (ModulePermission.RoleID = - 1)
return
end
if @IsEqual = 1 and @PermissionName='Edit'
begin
SELECT   Modules.ModuleID, ModuleTitle, Modules.PortalID, Tabs.TabName, Tabs.TabID
FROM Roles INNER JOIN
      ModulePermission ON Roles.RoleID = ModulePermission.RoleID INNER JOIN
      Permission ON 
      ModulePermission.PermissionID = Permission.PermissionID INNER JOIN
      UserRoles ON Roles.RoleID = UserRoles.RoleID INNER JOIN
      Modules INNER JOIN
      TabModules ON TabModules.ModuleID = Modules.ModuleID INNER JOIN
      Tabs ON Tabs.TabID = TabModules.TabID ON 
      ModulePermission.ModuleID = Modules.ModuleID
WHERE (Modules.ModuleDefID =
          @ModuleDefID) And (Modules.PortalId in (select portalid from @TempPortals)) And Modules.ModuleId not in(select ModuleId from @TempNotInfoModules) AND (Modules.IsDeleted = 0) AND 
      (Tabs.IsDeleted = 0) AND (Permission.PermissionName = 'Edit') AND 
      (UserRoles.UserID = @UserID)
union
SELECT  
      Modules.ModuleID, Modules.ModuleTitle, Modules.PortalID, Tabs.TabName, 
      Tabs.TabID
FROM Permission Permission_1 INNER JOIN
      Tabs INNER JOIN
      TabModules ON Tabs.TabID = TabModules.TabID INNER JOIN
      TabPermission ON Tabs.TabID = TabPermission.TabID ON 
      Permission_1.PermissionID = TabPermission.PermissionID INNER JOIN
      Roles Roles_1 ON TabPermission.RoleID = Roles_1.RoleID INNER JOIN
      UserRoles UserRoles_1 ON 
      Roles_1.RoleID = UserRoles_1.RoleID Inner JOIN
      Modules ON TabModules.ModuleID = Modules.ModuleID
WHERE (Modules.ModuleDefID =
          @ModuleDefID) And (Modules.PortalId in (select portalid from @TempPortals)) And Modules.ModuleId not in(select ModuleId from @TempNotInfoModules) AND (Modules.IsDeleted = 0) AND 
      (Tabs.IsDeleted = 0) AND (Permission_1.PermissionName = 'Edit Tab') AND 
      (UserRoles_1.UserID = @UserId)
union
SELECT  
      Modules.ModuleID, Modules.ModuleTitle, Modules.PortalID, Tabs.TabName, 
      Tabs.TabID
FROM ModulePermission INNER JOIN
      Permission ON 
      ModulePermission.PermissionID = Permission.PermissionID INNER JOIN
      Modules INNER JOIN
      TabModules ON TabModules.ModuleID = Modules.ModuleID INNER JOIN
      Tabs ON Tabs.TabID = TabModules.TabID ON 
      ModulePermission.ModuleID = Modules.ModuleID
WHERE (Modules.ModuleDefID =
          @ModuleDefID) And (Modules.PortalId in (select portalid from @TempPortals)) And Modules.ModuleId not in(select ModuleId from @TempNotInfoModules) AND (Modules.IsDeleted = 0) AND 
      (Tabs.IsDeleted = 0) AND (Permission.PermissionName = 'Edit' ) AND 
      (ModulePermission.RoleID = - 1)
end
else  if @IsEqual = 1 and @PermissionName='View'
begin
SELECT Modules.ModuleID, Modules.ModuleTitle, Modules.PortalID, Tabs.TabName, 
      Tabs.TabID
FROM Permission Permission_1 INNER JOIN
      Tabs INNER JOIN
      TabModules ON Tabs.TabID = TabModules.TabID INNER JOIN
      TabPermission ON Tabs.TabID = TabPermission.TabID ON 
      Permission_1.PermissionID = TabPermission.PermissionID INNER JOIN
      Modules ON TabModules.ModuleID = Modules.ModuleID 
WHERE (Modules.ModuleDefID =
          @ModuleDefID) And (Modules.PortalId in (select portalid from @TempPortals)) AND Modules.ModuleId not in(select ModuleId from @TempNotInfoModules) 
      AND (Modules.IsDeleted = 0) AND 
      (Tabs.IsDeleted = 0) AND (Permission_1.PermissionName = 'View Tab') AND 
      (Modules.InheritViewPermissions = 1) AND (TabPermission.RoleID = - 1)
union
SELECT  
      Modules.ModuleID, Modules.ModuleTitle, Modules.PortalID, Tabs.TabName, 
      Tabs.TabID
FROM Permission Permission_1 INNER JOIN
      Tabs INNER JOIN
      TabModules ON Tabs.TabID = TabModules.TabID INNER JOIN
      TabPermission ON Tabs.TabID = TabPermission.TabID ON 
      Permission_1.PermissionID = TabPermission.PermissionID INNER JOIN
      Roles Roles_1 ON TabPermission.RoleID = Roles_1.RoleID INNER JOIN
      UserRoles UserRoles_1 ON 
      Roles_1.RoleID = UserRoles_1.RoleID Inner JOIN
      Modules ON TabModules.ModuleID = Modules.ModuleID
WHERE (Modules.ModuleDefID =
          @ModuleDefID) And (Modules.PortalId in (select portalid from @TempPortals)) And Modules.ModuleId not in(select ModuleId from @TempNotInfoModules) AND (Modules.IsDeleted = 0) AND 
      (Tabs.IsDeleted = 0) AND (Permission_1.PermissionName = 'View Tab') AND InheritViewPermissions = 1 AND 
      (UserRoles_1.UserID = @UserId)
Union
SELECT  
      Modules.ModuleID, Modules.ModuleTitle, Modules.PortalID, Tabs.TabName, 
      Tabs.TabID
FROM Tabs INNER JOIN
      TabModules ON Tabs.TabID = TabModules.TabID Inner Join Modules on TabModules.ModuleID = Modules.ModuleID 
      Inner JOIN
      Roles INNER JOIN
      ModulePermission ON Roles.RoleID = ModulePermission.RoleID INNER JOIN
      Permission ON 
      ModulePermission.PermissionID = Permission.PermissionID INNER JOIN
      UserRoles ON Roles.RoleID = UserRoles.RoleID ON 
      Modules.ModuleID = ModulePermission.ModuleID
WHERE (Modules.ModuleDefID =
          @ModuleDefID) And (Modules.PortalId in (select portalid from @TempPortals)) And Modules.ModuleId not in(select ModuleId from @TempNotInfoModules) AND (Modules.IsDeleted = 0) AND 
      (Tabs.IsDeleted = 0) AND (Permission.PermissionName = 'View') AND 
      (UserRoles.UserID = @UserId) 
end
else if @PermissionName='Edit'
begin
SELECT DISTINCT 
      Modules.ModuleID, Modules.ModuleTitle, Modules.PortalID, Tabs.TabName, 
      Tabs.TabID
FROM Modules INNER JOIN
      TabModules ON TabModules.ModuleID = Modules.ModuleID INNER JOIN
      Tabs ON Tabs.TabID = TabModules.TabID INNER JOIN
      ModulePermission ON 
      Modules.ModuleID = ModulePermission.ModuleID INNER JOIN
      Permission ON ModulePermission.PermissionID = Permission.PermissionID
WHERE (Modules.InheritViewPermissions = 0) AND (Tabs.IsDeleted = 0) AND 
      (Modules.IsDeleted = 0) AND (Modules.ModuleDefID =
          @ModuleDefID) And (Modules.PortalId in (select portalid from @TempPortals)) AND 
      (Modules.ModuleID NOT IN (select ModuleId from @TempNotInfoModules)) AND (Modules.InheritViewPermissions = 0) AND 
      (ModulePermission.RoleID <> - 1)AND 
      (Permission.PermissionName = 'VIEW') AND (Modules.ModuleID NOT IN
          (SELECT Modules.ModuleID
         FROM ModulePermission INNER JOIN
               UserRoles ON ModulePermission.RoleID = UserRoles.RoleID INNER JOIN
               Modules ON ModulePermission.ModuleID = Modules.ModuleID INNER JOIN
               Permission ON 
               ModulePermission.PermissionID = Permission.PermissionID
         WHERE (UserRoles.UserID = @UserId) And (Modules.PortalId in (select portalid from @TempPortals)) AND (Modules.InheritViewPermissions = 0) AND 
               (Permission.PermissionName = 'Edit'))) AND (Modules.ModuleID NOT IN
       (SELECT Modules.ModuleID
FROM Modules INNER JOIN
      ModulePermission ON 
      Modules.ModuleID = ModulePermission.ModuleID INNER JOIN
      Permission ON ModulePermission.PermissionID = Permission.PermissionID
WHERE (Modules.InheritViewPermissions = 0) AND (ModulePermission.RoleID = - 1) AND 
      (Permission.PermissionName = 'Edit')))
end
else
begin
SELECT DISTINCT 
      Modules.ModuleID, Modules.ModuleTitle, Modules.PortalID, Tabs.TabName, 
      Tabs.TabID
FROM Modules INNER JOIN
      TabModules ON TabModules.ModuleID = Modules.ModuleID INNER JOIN
      Tabs ON Tabs.TabID = TabModules.TabID INNER JOIN
      ModulePermission ON 
      Modules.ModuleID = ModulePermission.ModuleID INNER JOIN
      Permission ON ModulePermission.PermissionID = Permission.PermissionID
WHERE (Modules.InheritViewPermissions = 0) AND (Tabs.IsDeleted = 0) AND 
      (Modules.IsDeleted = 0) AND (Modules.ModuleDefID =
          @ModuleDefID) And (Modules.PortalId in (select portalid from @TempPortals)) AND 
      (Modules.ModuleID NOT IN (select ModuleId from @TempNotInfoModules)) AND (Modules.InheritViewPermissions = 0) AND 
      (ModulePermission.RoleID <> - 1)AND 
      (Permission.PermissionName = 'VIEW') AND (Modules.ModuleID NOT IN
          (SELECT Modules.ModuleID
         FROM ModulePermission INNER JOIN
               UserRoles ON ModulePermission.RoleID = UserRoles.RoleID INNER JOIN
               Modules ON ModulePermission.ModuleID = Modules.ModuleID INNER JOIN
               Permission ON 
               ModulePermission.PermissionID = Permission.PermissionID
         WHERE (UserRoles.UserID = @UserId) And (Modules.PortalId in (select portalid from @TempPortals)) AND (Modules.InheritViewPermissions = 0) AND 
               (Permission.PermissionName = 'View'))) AND (Modules.ModuleID NOT IN
       (SELECT Modules.ModuleID
FROM Modules INNER JOIN
      ModulePermission ON 
      Modules.ModuleID = ModulePermission.ModuleID INNER JOIN
      Permission ON ModulePermission.PermissionID = Permission.PermissionID
WHERE (Modules.InheritViewPermissions = 0) AND (ModulePermission.RoleID = - 1) AND 
      (Permission.PermissionName = 'View')))
union
SELECT DISTINCT 
      Modules.ModuleID, Modules.ModuleTitle, Modules.PortalID, Tabs.TabName, 
      Tabs.TabID
FROM TabPermission INNER JOIN
      Permission ON TabPermission.PermissionID = Permission.PermissionID INNER JOIN
      Modules INNER JOIN
      TabModules ON TabModules.ModuleID = Modules.ModuleID INNER JOIN
      Tabs ON Tabs.TabID = TabModules.TabID ON 
      TabPermission.TabID = Tabs.TabID
WHERE (Modules.InheritViewPermissions = 1) AND (Tabs.IsDeleted = 0) AND 
      (Modules.IsDeleted = 0) AND (Modules.ModuleDefID =
          @ModuleDefID) And (Modules.PortalId in (select portalid from @TempPortals)) AND 
      (Modules.ModuleID NOT IN (select ModuleId from @TempNotInfoModules)) AND (Permission.PermissionName = 'View Tab') AND 
      (TabPermission.RoleID <> - 1) AND (Modules.ModuleID NOT IN
          (SELECT Modules.ModuleID
         FROM Permission INNER JOIN
               TabPermission ON 
               Permission.PermissionID = TabPermission.PermissionID INNER JOIN
               TabModules INNER JOIN
               Modules ON TabModules.ModuleID = Modules.ModuleID ON 
               TabPermission.TabID = TabModules.TabID INNER JOIN
               UserRoles ON TabPermission.RoleID = UserRoles.RoleID
         WHERE (Modules.InheritViewPermissions = 1) And (Modules.PortalId in (select portalid from @TempPortals)) AND 
               (Permission.PermissionName = 'View Tab') AND (UserRoles.UserID = @UserId))) 
      AND (Modules.ModuleID NOT IN
          (SELECT DISTINCT Modules.ModuleID
         FROM TabPermission INNER JOIN
               Permission ON 
               TabPermission.PermissionID = Permission.PermissionID INNER JOIN
               Modules INNER JOIN
               TabModules ON TabModules.ModuleID = Modules.ModuleID ON 
               TabPermission.TabID = TabModules.TabID
         WHERE (Modules.InheritViewPermissions = 1) And (Modules.PortalId in (select portalid from @TempPortals)) AND 
               (Permission.PermissionName = 'View Tab') AND (Modules.IsDeleted = 0) AND 
               (Modules.ModuleDefID =
                   @ModuleDefID) AND 
               (TabPermission.RoleID = - 1)))
end
GO

ALTER  PROCEDURE [dbo].[C_InfoGetList]
@PageSize int,
@CurrentPage int,
@OrderBy nvarchar(50),
@SearchCondition varchar(7000),
--@relatedModuleID use this parameter we can show mulity modules relitive search  by one artitcle
@relatedModuleIDs varchar(1000),
@filterUserRoleId int,
--@IsAdmin use this parameter , we can impore efficiency because we will not need transfer other function use by admin like 'C_InfoWorkFlowGetStatus'
@IsAdmin bit
as

declare @sqlstring VARCHAR(8000)
set @sqlstring=N'
declare @indextable table(id int identity(1,1),nid int,isRelative bit,CreateDate1 datetime,SortDate1 datetime,SortTop1 bit,Hits1 int,ModuleTitle nvarchar(256),PortalId int)
declare @PageLowerBound int
declare @PageUpperBound int
set @PageLowerBound=('+ cast(@CurrentPage as nvarchar) +'-1)*'+ cast(@PageSize as nvarchar) +'
set @PageUpperBound=@PageLowerBound+'+ cast(@PageSize as nvarchar) +' 
--set rowcount @PageUpperBound
insert into @indextable(nid,isRelative,CreateDate1,SortDate1,SortTop1,Hits1,ModuleTitle,PortalId)
select InfoID,0 as isRelative,CreateDate,SortDate,SortTop,Hits,ModuleTitle,PortalId from C_Info inner join Modules on C_Info.ModuleId=Modules.ModuleId where Modules.IsDeleted=0'
if(@filterUserRoleId > -1)
begin
set @sqlstring=@sqlstring+' And C_Info.InfoID in( SELECT C_info.InfoId
FROM C_InfoItemRole INNER JOIN
      UserRoles ON C_InfoItemRole.RoleId = UserRoles.RoleID RIGHT OUTER JOIN
      C_info ON C_InfoItemRole.InfoId = C_info.InfoID
WHERE UserRoles.UserID IS NULL OR UserRoles.UserID =  '+cast(@filterUserRoleId as varchar(10)) + ')'
end
set @sqlstring=@sqlstring+ @SearchCondition

if @relatedModuleIDs<>''
begin
set @SearchCondition = lower(@SearchCondition)
set @SearchCondition = replace(@SearchCondition,'c_info.moduleid=','c_info.moduleid<>')
set @SearchCondition = replace(@SearchCondition,'c_info.moduleid =','c_info.moduleid<>')
set @SearchCondition = replace(@SearchCondition,'c_info.moduleid in','c_info.moduleid not in')
set @sqlstring=@sqlstring+ ' 
union all
select C_Info.InfoID,1 as isRelative,CreateDate,SortDate,SortTop,Hits,ModuleTitle,PortalId from C_Info 
Inner Join C_InfoModuleInfos On C_Info.InfoID=C_InfoModuleInfos.InfoID inner join Modules on C_Info.ModuleId=Modules.ModuleId where Modules.IsDeleted=0 and C_InfoModuleInfos.ModuleID in('+@relatedModuleIDs +')' + @SearchCondition
end
if(@filterUserRoleId >-1)
begin
set @sqlstring=@sqlstring+'  And C_Info.InfoID in( SELECT C_info.InfoId
FROM C_InfoItemRole INNER JOIN
      UserRoles ON C_InfoItemRole.RoleId = UserRoles.RoleID RIGHT OUTER JOIN
      C_info ON C_InfoItemRole.InfoId = C_info.InfoID
WHERE UserRoles.UserID IS NULL OR UserRoles.UserID =  '+cast(@filterUserRoleId as varchar(10)) + ')'
end
set @sqlstring=@sqlstring+' order by ' + @OrderBy
+ '
 select @@RowCount'
+ ' 
select InfoID,ModuleID,ModuleTitle,PortalId,CreatedByUser,CreateDate,Title,ShortTitle,Description,
    Source,KeyWords,SetOrder,IsExtURL,ExtURL,Level,
    CategoryID,Author,Image,ImagePosition,ImageSize,ExpireDate,PubDate,
    Email,URL,Syndicate,SortTop,Recommend,TitleStyle,Hits,ApproveStatus,isRelative,CheckoutUserId'
if @IsAdmin=1
begin
set @sqlstring=@sqlstring+',SortDate,
    dbo.C_InfoGetCategory(categoryID) as CategoryName,
    dbo.C_InfoGetPagers(InfoID) as Pagers,
    dbo.C_InfoWorkFlowGetStatus(InfoID) as WorkFlowStatus,
    dbo.C_InfoWorkFlowGetNextActiveName(InfoID) as WorkFlowNextStep,
    (select displayname from users where userid=checkoutuserid) as CheckoutUser,
    dbo.C_info_GetSpecsByInfoID(InfoID) as Specs,
        (select count(*) from C_InfoVersions where InfoID=C_Info.InfoID) as VersionCount'
end
set @sqlstring=@sqlstring+'
from C_Info inner join @indextable as t on C_Info.InfoID=t.nid '

if @PageSize<>0
	set @sqlstring=@sqlstring+' and t.id>@PageLowerBound and t.id<=@PageUpperBound '

set @sqlstring=@sqlstring+'order by t.id'
--print(@sqlstring)
exec (@sqlstring)

--C_InfoGetList 1,1,"createdate desc",'',1,1
GO

if not exists(select * from {databaseOwner}{objectQualifier}Schedule Where TypeFullName='EasySite.Modules.C_Info.C_InfoDeploySchedule,EasySite.Modules.C_Info')
begin

INSERT INTO {databaseOwner}{objectQualifier}Schedule
      (TypeFullName, TimeLapse, TimeLapseMeasurement, RetryTimeLapse, 
      RetryTimeLapseMeasurement, RetainHistoryNum, AttachToEvent, CatchUpEnabled, 
      Enabled, ObjectDependencies)
VALUES ('EasySite.Modules.C_Info.C_InfoDeploySchedule,EasySite.Modules.C_Info', 10, 'm', 10, 
      'm', 5, 0, 0, 1, '')

end
GO

IF NOT EXISTS (SELECT 1 FROM EventLogConfig WHERE LogTypeKey='CMS_ITEMCREATED')
BEGIN
	INSERT INTO {databaseOwner}[{objectQualifier}EventLogConfig] ([LogTypeKey], [LogTypePortalID], [LoggingIsActive], [KeepMostRecent], [EmailNotificationIsActive], [NotificationThreshold], [NotificationThresholdTime], [NotificationThresholdTimeType], [MailFromAddress], [MailToAddress]) 
	VALUES (N'CMS_ITEMCREATED', NULL, 1, 500, 0, 1, 1, 1, N'', N'')
	INSERT INTO {databaseOwner}[{objectQualifier}EventLogConfig] ([LogTypeKey], [LogTypePortalID], [LoggingIsActive], [KeepMostRecent], [EmailNotificationIsActive], [NotificationThreshold], [NotificationThresholdTime], [NotificationThresholdTimeType], [MailFromAddress], [MailToAddress]) 
	VALUES (N'CMS_ITEMDELETED', NULL, 1, 500, 0, 1, 1, 1, N'', N'')
	INSERT INTO {databaseOwner}[{objectQualifier}EventLogConfig] ([LogTypeKey], [LogTypePortalID], [LoggingIsActive], [KeepMostRecent], [EmailNotificationIsActive], [NotificationThreshold], [NotificationThresholdTime], [NotificationThresholdTimeType], [MailFromAddress], [MailToAddress]) 
	VALUES (N'CMS_ITEMUPDATED', NULL, 1, 500, 0, 1, 1, 1, N'', N'')
	INSERT INTO {databaseOwner}[{objectQualifier}EventLogConfig] ([LogTypeKey], [LogTypePortalID], [LoggingIsActive], [KeepMostRecent], [EmailNotificationIsActive], [NotificationThreshold], [NotificationThresholdTime], [NotificationThresholdTimeType], [MailFromAddress], [MailToAddress]) 
	VALUES (N'CMS_ITEMAPPROVED', NULL, 1, 500, 0, 1, 1, 1, N'', N'')
	INSERT INTO {databaseOwner}[{objectQualifier}EventLogConfig] ([LogTypeKey], [LogTypePortalID], [LoggingIsActive], [KeepMostRecent], [EmailNotificationIsActive], [NotificationThreshold], [NotificationThresholdTime], [NotificationThresholdTimeType], [MailFromAddress], [MailToAddress]) 
	VALUES (N'CMS_ITEMREJECTED', NULL, 1, 500, 0, 1, 1, 1, N'', N'')
END
GO
